<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Phone Numbers to VCF Generator</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: 'Poppins', sans-serif;
    }

    body {
      background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%);
      min-height: 100vh;
      padding: 20px;
      display: flex;
      justify-content: center;
      align-items: center;
      color: #333;
    }

    .container {
      width: 100%;
      max-width: 900px;
      display: flex;
      flex-direction: column;
      gap: 20px;
    }

    .card {
      background: rgba(255, 255, 255, 0.95);
      border-radius: 20px;
      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.15);
      overflow: hidden;
      padding: 30px;
    }

    header {
      text-align: center;
      margin-bottom: 25px;
    }

    h1 {
      color: #2c3e50;
      font-size: 2.5rem;
      margin-bottom: 10px;
      background: linear-gradient(90deg, #6a11cb, #2575fc);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
    }

    .subtitle {
      color: #7f8c8d;
      font-size: 1.1rem;
      margin-bottom: 20px;
    }

    .input-section {
      margin-bottom: 30px;
    }

    .input-header {
      display: flex;
      align-items: center;
      gap: 10px;
      margin-bottom: 15px;
    }

    .input-header i {
      font-size: 1.5rem;
      color: #3498db;
    }

    .input-header h2 {
      color: #2c3e50;
      font-size: 1.4rem;
    }

    .input-container {
      display: flex;
      flex-wrap: wrap;
      gap: 20px;
      margin-bottom: 20px;
    }

    .input-box {
      flex: 1;
      min-width: 300px;
    }

    .file-input {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      border: 2px dashed #3498db;
      border-radius: 15px;
      padding: 30px 20px;
      background: #f8f9fa;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .file-input:hover {
      background: #e3f2fd;
      transform: translateY(-3px);
    }

    .file-input i {
      font-size: 3rem;
      color: #3498db;
      margin-bottom: 15px;
    }

    .file-input h3 {
      color: #2c3e50;
      margin-bottom: 10px;
      text-align: center;
    }

    .file-input p {
      color: #7f8c8d;
      font-size: 0.9rem;
      text-align: center;
    }

    #fileInput {
      display: none;
    }

    .divider {
      display: flex;
      align-items: center;
      justify-content: center;
      margin: 10px 0;
    }

    .divider span {
      padding: 0 15px;
      color: #7f8c8d;
      font-weight: 500;
    }

    .divider::before,
    .divider::after {
      content: '';
      flex: 1;
      height: 1px;
      background: #e0e0e0;
    }

    textarea {
      width: 100%;
      height: 200px;
      border: 2px solid #e0e0e0;
      border-radius: 15px;
      padding: 15px;
      font-size: 1rem;
      resize: vertical;
      transition: border-color 0.3s;
    }

    textarea:focus {
      outline: none;
      border-color: #3498db;
      box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.2);
    }

    .button-container {
      display: flex;
      justify-content: center;
      margin-top: 20px;
    }

    #generateBtn {
      background: linear-gradient(90deg, #6a11cb, #2575fc);
      color: white;
      border: none;
      border-radius: 50px;
      padding: 15px 40px;
      font-size: 1.2rem;
      font-weight: 600;
      cursor: pointer;
      display: flex;
      align-items: center;
      gap: 10px;
      box-shadow: 0 5px 15px rgba(38, 117, 252, 0.4);
      transition: all 0.3s ease;
    }

    #generateBtn:hover {
      transform: translateY(-3px);
      box-shadow: 0 8px 20px rgba(38, 117, 252, 0.6);
    }

    #generateBtn:active {
      transform: translateY(1px);
    }

    .counter {
      display: flex;
      justify-content: space-between;
      margin-top: 10px;
      color: #7f8c8d;
      font-size: 0.9rem;
    }

    .how-to-use {
      margin-top: 30px;
      background: #f8f9fa;
      border-radius: 15px;
      padding: 20px;
    }

    .how-to-use h3 {
      color: #2c3e50;
      margin-bottom: 15px;
      display: flex;
      align-items: center;
      gap: 10px;
    }

    .steps {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 20px;
    }

    .step {
      display: flex;
      gap: 15px;
    }

    .step-number {
      background: linear-gradient(135deg, #6a11cb, #2575fc);
      color: white;
      width: 36px;
      height: 36px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: bold;
      flex-shrink: 0;
    }

    .step-content h4 {
      color: #2c3e50;
      margin-bottom: 5px;
    }

    .step-content p {
      color: #7f8c8d;
      font-size: 0.9rem;
    }

    footer {
      text-align: center;
      color: rgba(255, 255, 255, 0.8);
      margin-top: 20px;
      font-size: 0.9rem;
      padding: 10px;
    }

    .status {
      text-align: center;
      margin-top: 15px;
      min-height: 24px;
      font-weight: 500;
    }

    .success {
      color: #27ae60;
    }

    .error {
      color: #e74c3c;
    }

    .info-card {
      background: #e3f2fd;
      border-radius: 15px;
      padding: 15px;
      margin: 15px 0;
      border-left: 4px solid #3498db;
    }

    .info-card h4 {
      color: #2c3e50;
      margin-bottom: 8px;
      display: flex;
      align-items: center;
      gap: 10px;
    }

    .info-card p {
      color: #7f8c8d;
      font-size: 0.9rem;
    }

    /* Responsive adjustments */
    @media (max-width: 768px) {
      .container {
        padding: 10px;
      }
      
      .card {
        padding: 20px;
      }
      
      h1 {
        font-size: 2rem;
      }
      
      .input-container {
        flex-direction: column;
      }
      
      .steps {
        grid-template-columns: 1fr;
      }
    }

    @media (max-width: 480px) {
      h1 {
        font-size: 1.8rem;
      }
      
      .input-header h2 {
        font-size: 1.2rem;
      }
      
      #generateBtn {
        padding: 12px 30px;
        font-size: 1rem;
      }
      
      .file-input {
        padding: 20px 15px;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="card">
      <header>
        <h1><i class="fas fa-address-book"></i> Phone Numbers to VCF Generator</h1>
        <p class="subtitle">Convert phone numbers to vCard contacts in seconds</p>
      </header>
      
      <div class="input-section">
        <div class="input-header">
          <i class="fas fa-upload"></i>
          <h2>Upload or Enter Phone Numbers</h2>
        </div>
        
        <div class="info-card">
          <h4><i class="fas fa-info-circle"></i> Format Information</h4>
          <p>Enter one contact per line. You can include names with phone numbers using the format: <strong>Name, Phone Number</strong>. If no name is provided, names will be automatically generated as poc1, poc2, etc.</p>
        </div>
        
        <div class="input-container">
          <div class="input-box">
            <label for="fileInput">
              <div class="file-input">
                <i class="fas fa-cloud-upload-alt"></i>
                <h3>Upload TXT File</h3>
                <p>Drag & drop or click to upload a text file<br>with one phone number per line</p>
              </div>
            </label>
            <input type="file" id="fileInput" accept=".txt" />
            <div class="counter">
              <span id="fileCount">No file selected</span>
            </div>
          </div>
          
          <div class="divider">
            <span>OR</span>
          </div>
          
          <div class="input-box">
            <label for="numbersInput">Enter numbers manually:</label>
            <textarea id="numbersInput" placeholder="Example:
John Doe, +1 (555) 123-4567
5559876543
Jane Smith, +44 20 7123 4567
+33 1 23 45 67 89
poc5, +1 800 555-1212"></textarea>
            <div class="counter">
              <span id="textCount">0 contacts entered</span>
            </div>
          </div>
        </div>
        
        <div class="status" id="status"></div>
      </div>
      
      <div class="button-container">
        <button id="generateBtn">
          <i class="fas fa-file-export"></i> Generate VCF File
        </button>
      </div>
    </div>
    
    <div class="card how-to-use">
      <h3><i class="fas fa-info-circle"></i> How to Use This Tool</h3>
      <div class="steps">
        <div class="step">
          <div class="step-number">1</div>
          <div class="step-content">
            <h4>Upload or Enter Numbers</h4>
            <p>Upload a .txt file with contacts or type them directly in the text area (one per line).</p>
          </div>
        </div>
        <div class="step">
          <div class="step-number">2</div>
          <div class="step-content">
            <h4>Generate VCF</h4>
            <p>Click the "Generate VCF File" button to create your contact file.</p>
          </div>
        </div>
        <div class="step">
          <div class="step-number">3</div>
          <div class="step-content">
            <h4>Import to Phone</h4>
            <p>Download the .vcf file and import it to your phone's contacts app.</p>
          </div>
        </div>
      </div>
    </div>
    
    <footer>
      <p>Created with ❤️ | Phone Numbers to VCF Generator v2.0 | Works on all devices</p>
    </footer>
  </div>

  <script>
    let numbersFromFile = [];
    const fileInput = document.getElementById('fileInput');
    const numbersInput = document.getElementById('numbersInput');
    const generateBtn = document.getElementById('generateBtn');
    const fileCount = document.getElementById('fileCount');
    const textCount = document.getElementById('textCount');
    const statusEl = document.getElementById('status');
    
    // Update text area count
    function updateTextCount() {
      const numbers = getContactsFromTextarea();
      textCount.textContent = `${numbers.length} contacts entered`;
      updateStatus();
    }
    
    // Get contacts from textarea
    function getContactsFromTextarea() {
      return numbersInput.value.split(/\r?\n/)
        .map(line => line.trim())
        .filter(line => line.length > 0);
    }
    
    // Update status message
    function updateStatus() {
      const fileContacts = numbersFromFile.length;
      const textContacts = getContactsFromTextarea().length;
      const totalContacts = fileContacts + textContacts;
      
      if (totalContacts === 0) {
        statusEl.textContent = "Please upload a file or enter contacts";
        statusEl.className = "status error";
      } else {
        statusEl.textContent = `Ready to generate ${totalContacts} contacts`;
        statusEl.className = "status success";
      }
    }
    
    // File input handling
    fileInput.addEventListener('change', function(event) {
      const file = event.target.files[0];
      if (!file) return;
      
      const reader = new FileReader();
      reader.onload = function(e) {
        const text = e.target.result;
        // Split by new lines and clean empty lines
        numbersFromFile = text.split(/\r?\n/)
          .map(line => line.trim())
          .filter(line => line.length > 0);
        
        fileCount.textContent = `File: ${file.name} (${numbersFromFile.length} contacts)`;
        updateStatus();
      };
      reader.readAsText(file);
    });
    
    // Textarea event listeners
    numbersInput.addEventListener('input', updateTextCount);
    numbersInput.addEventListener('focus', updateStatus);
    
    // Generate VCF function
    function generateVCF() {
      const textContacts = getContactsFromTextarea();
      const allContacts = [...numbersFromFile, ...textContacts];
      
      if (allContacts.length === 0) {
        statusEl.textContent = "Please upload a TXT file or enter at least one contact.";
        statusEl.className = "status error";
        return;
      }
      
      let pocCounter = 1;
      let vcfData = "";
      
      allContacts.forEach(contact => {
        let name = "";
        let number = "";
        
        // Check if contact has a comma (name and number)
        if (contact.includes(',')) {
          const parts = contact.split(',');
          name = parts[0].trim();
          number = parts.slice(1).join(',').trim();
        } else {
          // If no comma, the whole line is the number
          number = contact.trim();
        }
        
        // If no name provided, generate one like poc1, poc2, etc.
        if (!name) {
          name = `poc${pocCounter}`;
          pocCounter++;
        }
        
        // Only add if number is not empty
        if (number) {
          vcfData +=
            "BEGIN:VCARD\n" +
            "VERSION:3.0\n" +
            "FN:" + name + "\n" +
            "TEL:" + number + "\n" +
            "END:VCARD\n";
        }
      });
      
      if (vcfData === "") {
        statusEl.textContent = "No valid contacts found. Please check your input.";
        statusEl.className = "status error";
        return;
      }
      
      const blob = new Blob([vcfData], { type: "text/vcard" });
      const url = URL.createObjectURL(blob);
      const a = document.createElement("a");
      a.href = url;
      a.download = "contacts.vcf";
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      
      // Success message
      statusEl.textContent = `Success! Generated ${allContacts.length} contacts`;
      statusEl.className = "status success";
      
      // Reset file input after generation
      numbersFromFile = [];
      fileInput.value = "";
      fileCount.textContent = "No file selected";
    }
    
    // Add event listener to the button
    generateBtn.addEventListener('click', generateVCF);
    
    // Initialize
    updateTextCount();
  </script>
</body>
</html>
